{"ast":null,"code":"import _asyncToGenerator from \"/Users/yogendra/repos/chatnext/trunk/apps/grocery/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from \"axios\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(router, toastController) {\n      this.router = router;\n      this.toastController = toastController;\n      this.orderDetail = [];\n      this.orderItems = [];\n      this.selectedOrder = {};\n      this.totalOrderPrice = 0;\n      this.orderNumber = \"\";\n      this.orderDate = \"\";\n      this.deliveryAddress = {};\n      this.deliveryTime = \"\";\n      this.progressStatus = \"\";\n      this.recentOrderDetails = [];\n      // building-admin related variables\n      this.aggregatedRequirements = [];\n      this.isAggregateRequirementsRequired = true;\n      this.flatOrders = [];\n      this.totalPriceForParticularOrderOfFlat = 0;\n    }\n    successToast(message) {\n      this.toastController.create({\n        message: message,\n        duration: 3000,\n        // Duration of the toast in milliseconds\n        position: \"bottom\",\n        // Position of the toast on the screen ('top', 'bottom', 'middle')\n        color: \"success\" // You can customize the color based on your app's theme\n      }).then(toast => {\n        toast.present();\n      });\n    }\n    errorToast(message) {\n      this.toastController.create({\n        message: message,\n        duration: 3000,\n        // Duration of the toast in milliseconds\n        position: \"top\",\n        // Position of the toast on the screen ('top', 'bottom', 'middle')\n        color: \"danger\" // You can customize the color based on your app's theme\n      }).then(toast => {\n        toast.present();\n      });\n    }\n    getOrderDetails() {\n      axios.get(`https://api.jykrasolutions.com/api/user/orders/${localStorage.getItem(\"userId\")}`).then(res => {\n        // Clear existing data before fetching new order details\n        this.orderItems = [];\n        this.totalOrderPrice = 0;\n        this.orderDetail = [];\n        this.orderNumber = 0;\n        this.deliveryAddress = {};\n        this.deliveryTime = \" \";\n        this.orderDate = \" \";\n        this.progressStatus = \" \";\n        if (res.data.orders.length > 0) {\n          res.data.orders.forEach(order => {\n            order.orderItems.forEach(item => {\n              this.totalOrderPrice += item.productPrice * item.productQuantity;\n            });\n            const orderSummary = {\n              orderId: order.orderId,\n              orderDate: order.orderDate,\n              deliveryAddress: order.deliveryAddress,\n              deliveryTime: order.deliveryTime,\n              products: order.orderItems,\n              totalOrderPrice: this.totalOrderPrice,\n              progressStatus: order.progressStatus\n            };\n            this.orderDetail.push(orderSummary);\n            this.totalOrderPrice = 0;\n          });\n          // Sort orderDetail based on orderDate in descending order\n          this.orderDetail.sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime());\n        }\n        //console.log(this.orderDetail);\n      });\n    }\n    calculateOrderTotal(order) {\n      this.totalOrderPrice = order.totalOrderPrice;\n      console.log(this.totalOrderPrice);\n      return order.totalOrderPrice;\n    }\n    getOrderDetailsById(orderId) {\n      this.totalOrderPrice = 0;\n      this.selectedOrder = this.orderDetail.find(order => order.orderId === orderId);\n      // this.selectedOrder.products.forEach((product:any)=>{\n      // this.totalOrderPrice+=product.productPrice*product.productQuantity;\n      // })\n      // this.selectedOrder.totalOrderPrice=this.totalOrderPrice;\n      console.log(this.selectedOrder);\n      // console.log(this.totalOrderPrice)\n      return this.selectedOrder;\n    }\n    clearOrderSummary() {\n      // Clear order items array using splice\n      this.orderItems.splice(0, this.orderItems.length);\n      // Reset other properties to initial values\n      this.totalOrderPrice = 0;\n      this.orderNumber = 0;\n      this.orderDate = new Date();\n      this.deliveryAddress = {};\n      this.deliveryTime = \" \";\n    }\n    fetchAggregatedRequirements(selectedCity, selectedArea, selectedBuilding) {\n      this.isAggregateRequirementsRequired = true;\n      this.aggregatedRequirements = [];\n      if (selectedArea === \"\" || selectedBuilding === \"\") {\n        // this.errorToast(\"Please select city and building\");\n        //console.log(\"Please select city and building\");\n        return;\n      }\n      axios.get(`https://api.jykrasolutions.com/api/user/aggregateRequirements?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`).then(res => {\n        //console.log(res.data);\n        if (res.data.length > 0) {\n          res.data.forEach(requirement => {\n            this.aggregatedRequirements.push(requirement);\n          });\n        } else {\n          // //console.log(this.aggregatedRequirements[0]);\n          //console.log(\"No order Placed in your area\");\n          this.errorToast(\"No order Placed in your area\");\n        }\n      }).catch(err => {\n        //console.log(err);\n      });\n    }\n    fetchOrdersInformationOfFlat(selectedCity, selectedArea, selectedBuilding) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.isAggregateRequirementsRequired = false;\n        const flatOrdersResult = yield axios.get(`https://api.jykrasolutions.com/api/user/ordersLastDay?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`);\n        _this.flatOrders = flatOrdersResult.data;\n        //console.log(this.flatOrders);\n      })();\n    }\n    openFlatOrderDetail(flatOrder) {\n      //console.log(\"flatOrder\", flatOrder);\n      this.totalPriceForParticularOrderOfFlat = 0;\n      this.particularFlatOrders = flatOrder.orderDetails;\n      this.particularFlatOrders.forEach(product => {\n        this.totalPriceForParticularOrderOfFlat += product.price * product.quantity;\n      });\n      //console.log(\"particularFlatOrders\", this.particularFlatOrders);\n      this.router.navigate([\"/order-details\"]);\n    }\n    static #_ = this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastController));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}