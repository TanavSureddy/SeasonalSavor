{"ast":null,"code":"import _asyncToGenerator from \"/Users/yogendra/repos/grocery/grocery-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from \"axios\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nexport class OrderService {\n  constructor(router, toastController) {\n    this.router = router;\n    this.toastController = toastController;\n    this.orderDetail = [];\n    this.orderItems = [];\n    this.selectedOrder = {};\n    this.totalOrderPrice = 0;\n    this.orderNumber = \"\";\n    this.orderDate = \"\";\n    this.deliveryAddress = {};\n    this.deliveryTime = \"\";\n    this.progressStatus = \"\";\n    this.recentOrderDetails = [];\n    // building-admin related variables\n    this.aggregatedRequirements = [];\n    this.isAggregateRequirementsRequired = true;\n    this.flatOrders = [];\n    this.totalPriceForParticularOrderOfFlat = 0;\n  }\n  successToast(message) {\n    this.toastController.create({\n      message: message,\n      duration: 3000,\n      // Duration of the toast in milliseconds\n      position: \"bottom\",\n      // Position of the toast on the screen ('top', 'bottom', 'middle')\n      color: \"success\" // You can customize the color based on your app's theme\n    }).then(toast => {\n      toast.present();\n    });\n  }\n  errorToast(message) {\n    this.toastController.create({\n      message: message,\n      duration: 3000,\n      // Duration of the toast in milliseconds\n      position: \"top\",\n      // Position of the toast on the screen ('top', 'bottom', 'middle')\n      color: \"danger\" // You can customize the color based on your app's theme\n    }).then(toast => {\n      toast.present();\n    });\n  }\n  getOrderDetails() {\n    axios.get(`https://api.jykrasolutions.com/api/user/orders/${localStorage.getItem(\"userId\")}`).then(res => {\n      // Clear existing data before fetching new order details\n      this.orderItems = [];\n      this.totalOrderPrice = 0;\n      this.orderDetail = [];\n      this.orderNumber = 0;\n      this.deliveryAddress = {};\n      this.deliveryTime = \" \";\n      this.orderDate = \" \";\n      this.progressStatus = \" \";\n      if (res.data.orders.length > 0) {\n        res.data.orders.forEach(order => {\n          order.orderItems.forEach(item => {\n            this.totalOrderPrice += item.productPrice * item.productQuantity;\n          });\n          const orderSummary = {\n            orderId: order.orderId,\n            orderDate: order.orderDate,\n            deliveryAddress: order.deliveryAddress,\n            deliveryTime: order.deliveryTime,\n            products: order.orderItems,\n            totalOrderPrice: this.totalOrderPrice,\n            progressStatus: order.progressStatus\n          };\n          this.orderDetail.push(orderSummary);\n          this.totalOrderPrice = 0;\n        });\n        // Sort orderDetail based on orderDate in descending order\n        this.orderDetail.sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime());\n      }\n      //console.log(this.orderDetail);\n    });\n  }\n  calculateOrderTotal(order) {\n    this.totalOrderPrice = order.totalOrderPrice;\n    console.log(this.totalOrderPrice);\n    return order.totalOrderPrice;\n  }\n  getOrderDetailsById(orderId) {\n    this.totalOrderPrice = 0;\n    this.selectedOrder = this.orderDetail.find(order => order.orderId === orderId);\n    // this.selectedOrder.products.forEach((product:any)=>{\n    // this.totalOrderPrice+=product.productPrice*product.productQuantity;\n    // })\n    // this.selectedOrder.totalOrderPrice=this.totalOrderPrice;\n    console.log(this.selectedOrder);\n    // console.log(this.totalOrderPrice)\n    return this.selectedOrder;\n  }\n  clearOrderSummary() {\n    // Clear order items array using splice\n    this.orderItems.splice(0, this.orderItems.length);\n    // Reset other properties to initial values\n    this.totalOrderPrice = 0;\n    this.orderNumber = 0;\n    this.orderDate = new Date();\n    this.deliveryAddress = {};\n    this.deliveryTime = \" \";\n  }\n  fetchAggregatedRequirements(selectedCity, selectedArea, selectedBuilding) {\n    this.isAggregateRequirementsRequired = true;\n    this.aggregatedRequirements = [];\n    if (selectedArea === \"\" || selectedBuilding === \"\") {\n      // this.errorToast(\"Please select city and building\");\n      //console.log(\"Please select city and building\");\n      return;\n    }\n    axios.get(`https://api.jykrasolutions.com/api/user/aggregateRequirements?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`).then(res => {\n      //console.log(res.data);\n      if (res.data.length > 0) {\n        res.data.forEach(requirement => {\n          this.aggregatedRequirements.push(requirement);\n        });\n      } else {\n        // //console.log(this.aggregatedRequirements[0]);\n        //console.log(\"No order Placed in your area\");\n        this.errorToast(\"No order Placed in your area\");\n      }\n    }).catch(err => {\n      //console.log(err);\n    });\n  }\n  fetchOrdersInformationOfFlat(selectedCity, selectedArea, selectedBuilding) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.isAggregateRequirementsRequired = false;\n      const flatOrdersResult = yield axios.get(`https://api.jykrasolutions.com/api/user/ordersLastDay?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`);\n      _this.flatOrders = flatOrdersResult.data;\n      //console.log(this.flatOrders);\n    })();\n  }\n  openFlatOrderDetail(flatOrder) {\n    //console.log(\"flatOrder\", flatOrder);\n    this.totalPriceForParticularOrderOfFlat = 0;\n    this.particularFlatOrders = flatOrder.orderDetails;\n    this.particularFlatOrders.forEach(product => {\n      this.totalPriceForParticularOrderOfFlat += product.price * product.quantity;\n    });\n    //console.log(\"particularFlatOrders\", this.particularFlatOrders);\n    this.router.navigate([\"/order-details\"]);\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastController));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["axios","OrderService","constructor","router","toastController","orderDetail","orderItems","selectedOrder","totalOrderPrice","orderNumber","orderDate","deliveryAddress","deliveryTime","progressStatus","recentOrderDetails","aggregatedRequirements","isAggregateRequirementsRequired","flatOrders","totalPriceForParticularOrderOfFlat","successToast","message","create","duration","position","color","then","toast","present","errorToast","getOrderDetails","get","localStorage","getItem","res","data","orders","length","forEach","order","item","productPrice","productQuantity","orderSummary","orderId","products","push","sort","a","b","Date","getTime","calculateOrderTotal","console","log","getOrderDetailsById","find","clearOrderSummary","splice","fetchAggregatedRequirements","selectedCity","selectedArea","selectedBuilding","requirement","catch","err","fetchOrdersInformationOfFlat","_this","_asyncToGenerator","flatOrdersResult","openFlatOrderDetail","flatOrder","particularFlatOrders","orderDetails","product","price","quantity","navigate","_","i0","ɵɵinject","i1","Router","i2","ToastController","_2","factory","ɵfac","providedIn"],"sources":["/Users/yogendra/repos/grocery/grocery-app/src/app/services/order/order.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport axios from \"axios\";\nimport { Router } from \"@angular/router\";\nimport { ToastController } from \"@ionic/angular\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OrderService {\n  orderDetail: any = [];\n  orderItems: Array<any> = [];\n  selectedOrder: any = {};\n  totalOrderPrice: number = 0;\n\n  orderNumber: any = \"\";\n  orderDate: any = \"\";\n  deliveryAddress: any = {};\n  deliveryTime: string = \"\";\n  progressStatus: string = \"\";\n  recentOrderDetails: any = [];\n\n  // building-admin related variables\n  aggregatedRequirements: Array<any> = [];\n  isAggregateRequirementsRequired: boolean = true;\n  flatOrders: Array<any> = [];\n  particularFlatOrders: any;\n  totalPriceForParticularOrderOfFlat: number = 0;\n\n  constructor(\n    private router: Router,\n    private toastController: ToastController\n  ) {}\n\n  successToast(message: string) {\n    this.toastController\n      .create({\n        message: message,\n        duration: 3000, // Duration of the toast in milliseconds\n        position: \"bottom\",\n        // Position of the toast on the screen ('top', 'bottom', 'middle')\n        color: \"success\", // You can customize the color based on your app's theme\n      })\n      .then((toast) => {\n        toast.present();\n      });\n  }\n\n  errorToast(message: string) {\n    this.toastController\n      .create({\n        message: message,\n        duration: 3000, // Duration of the toast in milliseconds\n        position: \"top\", // Position of the toast on the screen ('top', 'bottom', 'middle')\n        color: \"danger\", // You can customize the color based on your app's theme\n      })\n      .then((toast) => {\n        toast.present();\n      });\n  }\n\n  getOrderDetails() {\n    axios\n      .get(\n        `https://api.jykrasolutions.com/api/user/orders/${localStorage.getItem(\n          \"userId\"\n        )}`\n      )\n      .then((res) => {\n        // Clear existing data before fetching new order details\n        this.orderItems = [];\n        this.totalOrderPrice = 0;\n        this.orderDetail = [];\n        this.orderNumber = 0;\n        this.deliveryAddress = {};\n        this.deliveryTime = \" \";\n        this.orderDate = \" \";\n        this.progressStatus = \" \";\n\n        if (res.data.orders.length > 0) {\n          res.data.orders.forEach((order: any) => {\n            order.orderItems.forEach((item: any) => {\n              this.totalOrderPrice += item.productPrice * item.productQuantity;\n            });\n            const orderSummary = {\n              orderId: order.orderId,\n              orderDate: order.orderDate,\n              deliveryAddress: order.deliveryAddress,\n              deliveryTime: order.deliveryTime,\n              products: order.orderItems,\n              totalOrderPrice: this.totalOrderPrice,\n              progressStatus: order.progressStatus,\n            };\n\n            this.orderDetail.push(orderSummary);\n            this.totalOrderPrice = 0;\n          });\n\n          // Sort orderDetail based on orderDate in descending order\n          this.orderDetail.sort(\n            (a: any, b: any) =>\n              new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime()\n          );\n        }\n        //console.log(this.orderDetail);\n      });\n  }\n\n  calculateOrderTotal(order: any) {\n    this.totalOrderPrice = order.totalOrderPrice;\n    console.log(this.totalOrderPrice);\n   return order.totalOrderPrice;\n  }\n\n  getOrderDetailsById(orderId: any) {\n    this.totalOrderPrice=0;\n    this.selectedOrder = this.orderDetail.find(\n      (order: any) => order.orderId === orderId\n    );\n\n    // this.selectedOrder.products.forEach((product:any)=>{\n    // this.totalOrderPrice+=product.productPrice*product.productQuantity;\n    // })\n    // this.selectedOrder.totalOrderPrice=this.totalOrderPrice;\n    console.log(this.selectedOrder);\n    // console.log(this.totalOrderPrice)\n    return this.selectedOrder;\n  }\n\n  clearOrderSummary() {\n    // Clear order items array using splice\n    this.orderItems.splice(0, this.orderItems.length);\n    // Reset other properties to initial values\n    this.totalOrderPrice = 0;\n    this.orderNumber = 0;\n    this.orderDate = new Date();\n    this.deliveryAddress = {};\n    this.deliveryTime = \" \";\n  }\n\n  fetchAggregatedRequirements(\n    selectedCity: string,\n    selectedArea: string,\n    selectedBuilding: string\n  ) {\n    this.isAggregateRequirementsRequired = true;\n    this.aggregatedRequirements = [];\n    if (selectedArea === \"\" || selectedBuilding === \"\") {\n      // this.errorToast(\"Please select city and building\");\n      //console.log(\"Please select city and building\");\n      return;\n    }\n    axios\n      .get(\n        `https://api.jykrasolutions.com/api/user/aggregateRequirements?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`\n      )\n      .then((res) => {\n        //console.log(res.data);\n        if (res.data.length > 0) {\n          res.data.forEach((requirement: any) => {\n            this.aggregatedRequirements.push(requirement);\n          });\n        } else {\n          // //console.log(this.aggregatedRequirements[0]);\n\n          //console.log(\"No order Placed in your area\");\n          this.errorToast(\"No order Placed in your area\");\n        }\n      })\n      .catch((err) => {\n        //console.log(err);\n      });\n  }\n\n  async fetchOrdersInformationOfFlat(\n    selectedCity: string,\n    selectedArea: string,\n    selectedBuilding: string\n  ) {\n    this.isAggregateRequirementsRequired = false;\n    const flatOrdersResult = await axios.get(\n      `https://api.jykrasolutions.com/api/user/ordersLastDay?city=${selectedCity}&area=${selectedArea}&building=${selectedBuilding}`\n    );\n    this.flatOrders = flatOrdersResult.data;\n    //console.log(this.flatOrders);\n  }\n\n  openFlatOrderDetail(flatOrder: any) {\n    //console.log(\"flatOrder\", flatOrder);\n    this.totalPriceForParticularOrderOfFlat = 0;\n    this.particularFlatOrders = flatOrder.orderDetails;\n    this.particularFlatOrders.forEach((product: any) => {\n      this.totalPriceForParticularOrderOfFlat +=\n        product.price * product.quantity;\n    });\n    //console.log(\"particularFlatOrders\", this.particularFlatOrders);\n    this.router.navigate([\"/order-details\"]);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}